#!/usr/bin/env python
from __future__ import print_function

import roslib
roslib.load_manifest('bridge')
import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import *
from geometry_msgs.msg import *
from cv_bridge import CvBridge, CvBridgeError
from copy import deepcopy
import socket, select
from socket import error as sock_error
import struct
import time
import errno
 
class image_converter:

    MAX_BUF = 1

    depth_ims = []
    color_ims = []                                             
    poses = []

    def __init__(self):
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("color_topic",Image,self.color_callback)
        self.depth_sub = rospy.Subscriber("depth_topic",Image,self.depth_callback)
        # self.info_sub = rospy.Subscriber("info_topic",CameraInfo,self.info_callback) // How to gather intrinsics from topic
        self.pose_sub = rospy.Subscriber("pose", PoseStamped, self.pose_callback)
        
        print(rospy.get_param("bridge/IP"))

        self.connect()

        self.timer = rospy.Timer(rospy.Duration(1.0/15.0), self.time_callback)
        
    def color_callback(self,data):
        try:
            if (len(self.color_ims) <= self.MAX_BUF):
                cv_image = self.bridge.imgmsg_to_cv2(data, "passthrough")
                self.color_ims.append([data.header.stamp.to_sec(), np.array(cv_image).copy()])
        except CvBridgeError as e:
            print(e)


    def depth_callback(self, data):
        try:
            if (len(self.depth_ims) <= self.MAX_BUF):
                cv_image = self.bridge.imgmsg_to_cv2(data, "passthrough")
                self.depth_ims.append([data.header.stamp.to_sec(), np.array(cv_image).copy()])
        except CvBridgeError as e:
            print(e)
        

    def pose_callback(self, data):
        if (len(self.poses) <= self.MAX_BUF):
            self.poses.append([data.header.stamp.to_sec(), deepcopy(data.pose)])
    
    def info_callback(self, data):
        print(data)

    def time_callback(self, timer):
        cur_time = rospy.Time.now().to_sec()
        if len(self.depth_ims) and len(self.color_ims) and len(self.poses):
            # print((len(self.depth_ims), len(self.color_ims), len(self.poses)))
            for i in range(len(self.depth_ims)):
                depth_time = round(self.depth_ims[i][0], 1)
                # print('dep')
                # print(depth_time)
                for j in range(len(self.color_ims)):
                    color_time = round(self.color_ims[j][0], 1)
                    # print('col')
                    # print(color_time)
                    for k in range(len(self.poses)):
                        pose_time = round(self.poses[k][0], 1)
                        # print('pos')
                        # print(pose_time)
                        if depth_time == color_time and ((color_time - pose_time) < 0.3):
                            print("Printing :)")

                            # publish - port stuff
                            self.publish(i,j,k)
                            # remove from list and return cause we're done
                            self.depth_ims.pop(i)
                            self.color_ims.pop(j)
                            self.poses.pop(k)
                            return
                        # no need to check older stuff
                        if pose_time > color_time:
                            break
                    # no need to check older stuff
                    if color_time > depth_time:
                        break
        
        # filter out everything older than 10 seconds
        self.color_ims = [color_im for color_im in self.color_ims if color_im[0] < cur_time - 20.0][:100]
        self.depth_ims = [depth_im for depth_im in self.depth_ims if depth_im[0] < cur_time - 20.0][:100]
        self.poses = [pose for pose in self.poses if pose[0] < cur_time - 20.0][:100]

    def publish(self, depth_ind, color_ind, pose_ind):

        try:
            self.sock.recv(1)

            # Convert frames to numpy arrays
            depth_np = np.asanyarray(self.depth_ims[depth_ind][1])
            color_np = np.asanyarray(self.color_ims[color_ind][1])

            # Encode the frames
            _, depth_encoded = cv2.imencode('.png', depth_np)
            _, color_encoded = cv2.imencode('.png', color_np)
            # print(depth_encoded)

            depth_data_encoded = np.array(depth_encoded)
            depth_str_encoded = depth_data_encoded.tobytes()
            # print(depth_data_encoded)

            color_data_encoded = np.array(color_encoded)
            color_str_encoded = color_data_encoded.tobytes()

            pose_np = np.array([
                self.poses[pose_ind][1].position.x, \
                self.poses[pose_ind][1].position.y, \
                self.poses[pose_ind][1].position.z, \
                self.poses[pose_ind][1].orientation.x, \
                self.poses[pose_ind][1].orientation.y, \
                self.poses[pose_ind][1].orientation.z, \
                self.poses[pose_ind][1].orientation.w \
            ])
            pose_encoded = pose_np.tobytes()

            # Send the data
            msg = struct.pack('>III', len(depth_str_encoded), len(color_str_encoded), len(pose_encoded)) + depth_str_encoded + color_str_encoded + pose_encoded
            print("Data sent")
            self.sock.sendall(msg)
            
        except sock_error as serr:
            if serr.errno != 32 and serr.errno != 104:
                raise (serr)
            
            print("Disconnected from receiver")
            self.connect()

    def connect(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        while True:
            print(rospy.get_param("bridge/IP"))
            print(rospy.get_param("bridge/PORT"))
            try:
                self.sock.connect((rospy.get_param("bridge/IP"), int(rospy.get_param("bridge/PORT"))))
                break
            except:
                print("Unable to connect, retrying...")
                time.sleep(3)
                continue


def main(args):
    rospy.init_node('image_converter', anonymous=True)
    ic = image_converter()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

if __name__ == '__main__':
    main(sys.argv)